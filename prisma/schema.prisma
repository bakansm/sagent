// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageType {
    RESULT
    ERROR
}

model Message {
    id        String   @id @default(uuid())
    content   String
    role      MessageRole   
    type      MessageType
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    threadId  String
    thread    Thread  @relation(fields: [threadId], references: [id], onDelete: Cascade)

    fragments Fragment?
}

model Fragment {
    id        String   @id @default(uuid())
    messageId String   @unique
    message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
    
    sandboxId  String
    sandboxUrl String
    title      String
    files      Json

    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Thread {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    messages Message[]
}

// Necessary for Next auth
// model Account {
//     id                       String  @id @default(cuid())
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? // @db.Text
//     access_token             String? // @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     refresh_token_expires_in Int?

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
