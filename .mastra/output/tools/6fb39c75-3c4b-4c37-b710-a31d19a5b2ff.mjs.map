{"version":3,"file":"6fb39c75-3c4b-4c37-b710-a31d19a5b2ff.mjs","sources":["../../../src/mastra/tools/rename-file.tool.ts"],"sourcesContent":["import { getSandbox } from \"@/inngest/utils\";\nimport { createTool } from \"@mastra/core/tools\";\nimport { z } from \"zod\";\n\nexport const renameFileTool = createTool({\n  id: \"rename-file\",\n  description: \"Rename a file or directory.\",\n  inputSchema: z.object({\n    paths: z.array(\n      z.object({\n        oldPath: z.string().describe(\"The path to rename\"),\n        newPath: z.string().describe(\"The new path\"),\n      }),\n    ),\n    sandboxId: z.string().describe(\"The sandbox ID\"),\n  }),\n  outputSchema: z.object({\n    files: z.array(\n      z.object({\n        name: z.string().describe(\"The name of the file or directory.\"),\n        type: z\n          .enum([\"file\", \"dir\"])\n          .describe(\"The type of the file or directory.\"),\n        path: z.string().describe(\"The path to the file or directory.\"),\n      }),\n    ),\n  }),\n  execute: async ({ context }) => {\n    const { paths, sandboxId } = context;\n    const sandbox = await getSandbox(sandboxId);\n    try {\n      const files = await Promise.all(\n        paths.map((path) => sandbox.files.rename(path.oldPath, path.newPath)),\n      );\n\n      const resultFiles = files\n        .filter((file) => file && (file.type === \"file\" || file.type === \"dir\"))\n        .map((file) => ({\n          name: file.name,\n          type: file.type as \"file\" | \"dir\",\n          path: file.path,\n        }));\n\n      return {\n        files: resultFiles,\n      };\n    } catch (error: unknown) {\n      return {\n        files: [],\n      };\n    }\n  },\n});\n"],"names":[],"mappings":";;;;;;AAIO,MAAM,iBAAiB,UAAA,CAAW;AAAA,EACvC,EAAA,EAAI,aAAA;AAAA,EACJ,WAAA,EAAa,6BAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,OAAO,CAAA,CAAE,KAAA;AAAA,MACP,EAAE,MAAA,CAAO;AAAA,QACP,OAAA,EAAS,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,oBAAoB,CAAA;AAAA,QACjD,OAAA,EAAS,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,cAAc;AAAA,OAC5C;AAAA,KACH;AAAA,IACA,SAAA,EAAW,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,gBAAgB;AAAA,GAChD,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,OAAO,CAAA,CAAE,KAAA;AAAA,MACP,EAAE,MAAA,CAAO;AAAA,QACP,IAAA,EAAM,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,oCAAoC,CAAA;AAAA,QAC9D,IAAA,EAAM,EACH,IAAA,CAAK,CAAC,QAAQ,KAAK,CAAC,CAAA,CACpB,QAAA,CAAS,oCAAoC,CAAA;AAAA,QAChD,IAAA,EAAM,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,oCAAoC;AAAA,OAC/D;AAAA;AACH,GACD,CAAA;AAAA,EACD,OAAA,EAAS,OAAO,EAAE,OAAA,EAAQ,KAAM;AAC9B,IAAA,MAAM,EAAE,KAAA,EAAO,SAAA,EAAU,GAAI,OAAA;AAC7B,IAAA,MAAM,OAAA,GAAU,MAAM,UAAA,CAAW,SAAS,CAAA;AAC1C,IAAA,IAAI;AACF,MAAA,MAAM,KAAA,GAAQ,MAAM,OAAA,CAAQ,GAAA;AAAA,QAC1B,KAAA,CAAM,GAAA,CAAI,CAAC,IAAA,KAAS,OAAA,CAAQ,KAAA,CAAM,MAAA,CAAO,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,OAAO,CAAC;AAAA,OACtE;AAEA,MAAA,MAAM,WAAA,GAAc,KAAA,CACjB,MAAA,CAAO,CAAC,SAAS,IAAA,KAAS,IAAA,CAAK,IAAA,KAAS,MAAA,IAAU,KAAK,IAAA,KAAS,KAAA,CAAM,CAAA,CACtE,GAAA,CAAI,CAAC,IAAA,MAAU;AAAA,QACd,MAAM,IAAA,CAAK,IAAA;AAAA,QACX,MAAM,IAAA,CAAK,IAAA;AAAA,QACX,MAAM,IAAA,CAAK;AAAA,OACb,CAAE,CAAA;AAEJ,MAAA,OAAO;AAAA,QACL,KAAA,EAAO;AAAA,OACT;AAAA,IACF,SAAS,KAAA,EAAgB;AACvB,MAAA,OAAO;AAAA,QACL,OAAO;AAAC,OACV;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;;"}