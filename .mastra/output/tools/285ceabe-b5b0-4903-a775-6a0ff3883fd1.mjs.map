{"version":3,"file":"285ceabe-b5b0-4903-a775-6a0ff3883fd1.mjs","sources":["../../../src/mastra/tools/terminal.tool.ts"],"sourcesContent":["import { getSandbox } from \"@/inngest/utils\";\nimport { createTool } from \"@mastra/core/tools\";\nimport { z } from \"zod\";\n\nexport const terminalTool = createTool({\n  id: \"terminal\",\n  description: \"Start a new command and wait until it finishes executing.\",\n  inputSchema: z.object({\n    command: z.string().describe(\"The command to run\"),\n    sandboxId: z.string().describe(\"The sandbox ID\"),\n  }),\n  outputSchema: z.object({\n    stdout: z.string(),\n    stderr: z.string(),\n  }),\n  execute: async ({ context }) => {\n    const { command, sandboxId } = context;\n    const sandbox = await getSandbox(sandboxId);\n    try {\n      const { stdout, stderr } = await sandbox.commands.run(command);\n      if (stderr) throw new Error(stderr);\n      return { stdout, stderr };\n    } catch (e) {\n      throw new Error(\n        `Execution Error: ${e instanceof Error ? e.message : String(e)}`,\n      );\n    }\n  },\n});\n"],"names":[],"mappings":";;;;;;AAIO,MAAM,eAAe,UAAA,CAAW;AAAA,EACrC,EAAA,EAAI,UAAA;AAAA,EACJ,WAAA,EAAa,2DAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,OAAA,EAAS,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,oBAAoB,CAAA;AAAA,IACjD,SAAA,EAAW,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,gBAAgB;AAAA,GAChD,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,IACjB,MAAA,EAAQ,EAAE,MAAA;AAAO,GAClB,CAAA;AAAA,EACD,OAAA,EAAS,OAAO,EAAE,OAAA,EAAQ,KAAM;AAC9B,IAAA,MAAM,EAAE,OAAA,EAAS,SAAA,EAAU,GAAI,OAAA;AAC/B,IAAA,MAAM,OAAA,GAAU,MAAM,UAAA,CAAW,SAAS,CAAA;AAC1C,IAAA,IAAI;AACF,MAAA,MAAM,EAAE,QAAQ,MAAA,EAAO,GAAI,MAAM,OAAA,CAAQ,QAAA,CAAS,IAAI,OAAO,CAAA;AAC7D,MAAA,IAAI,MAAA,EAAQ,MAAM,IAAI,KAAA,CAAM,MAAM,CAAA;AAClC,MAAA,OAAO,EAAE,QAAQ,MAAA,EAAO;AAAA,IAC1B,SAAS,CAAA,EAAG;AACV,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,oBAAoB,CAAA,YAAa,KAAA,GAAQ,EAAE,OAAA,GAAU,MAAA,CAAO,CAAC,CAAC,CAAA;AAAA,OAChE;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;;"}